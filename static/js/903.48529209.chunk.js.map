{"version":3,"file":"static/js/903.48529209.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","redux/contacts/selectors.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/FilterContacts/FilterContacts.module.css?4cf4","components/FilterContacts/FilterContacts.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactBookSection\":\"Section_contactBookSection__i8msi\",\"contactTitle\":\"Section_contactTitle__IgOBG\"};","import styles from \"./Section.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction Section ({title, children}) {\nreturn (\n  <section className={styles.contactBookSection}>\n    <h2 className={styles.contactTitle}>{title}</h2>\n    {children}\n  </section>\n  )\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.array.isRequired\n}\n\nexport default Section;","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectStatusFilter = state => state.filters.status;\n\nexport const getFilteredContacts = createSelector(\n  [selectContacts, selectStatusFilter],\n\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","// extracted by mini-css-extract-plugin\nexport default {\"labelName\":\"ContactForm_labelName__3dKMP\",\"labelPhone\":\"ContactForm_labelPhone__NRIcw\",\"formInput\":\"ContactForm_formInput__GszVU\",\"btnSubmit\":\"ContactForm_btnSubmit__+7wnS\"};","import React, {useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport styles from \"./ContactForm.module.css\";\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  width: '280px',\n  position: 'center-center',\n  distance: '10px',\n  opacity: 1,\n});\n\nfunction ContactForm() {\n  const contacts = useSelector(selectContacts)\n  const dispatch = useDispatch();\n  const [formData, setFormData] = useState({ name: '', number: '' });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  \n    const newContact = {\n      id: nanoid(),\n      name: formData.name,\n      number: formData.number,\n    };\n  \n    handleAddContacts(newContact); \n  \n    setFormData({ name: '', number: '' }); \n  };\n  \n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleAddContacts = (newContact) => {\n    const existingContactByName = contacts.find(contact => contact.name === newContact.name);\n    const existingContactByNumber = contacts.find(contact => contact.number === newContact.number);\n\n    if (existingContactByName) {\n      Notiflix.Notify.failure(`${newContact.name} is already in contacts!`);\n    } else if (existingContactByNumber) {\n      Notiflix.Notify.failure(`Number ${newContact.number} is already in contacts!`);\n    } else {\n      dispatch(addContact({name: newContact.name, number: newContact.number}));\n    }\n  };\n\n  const { name, number } = formData;\n  const isFormValid = name.trim() !== '' && number.trim() !== '';\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.labelName}> Name:\n        <input\n          className={styles.formInput}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          placeholder='Name'\n          pattern=\"^[a-zA-Z]+(([' \\-][a-zA-Z ])?[a-zA-Z]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={styles.labelPhone}> Number:\n        <input\n          className={styles.formInput}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          placeholder='Phone number'\n          pattern=\"\\+?\\d{1,4}?[[\\-.\\s]]?\\(?\\d{1,3}?\\)?[[\\-.\\s]]?\\d{1,4}[[\\-.\\s]]?\\d{1,4}[[\\-.\\s]]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={styles.btnSubmit} disabled={!isFormValid}>Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"titleContact\":\"ContactList_titleContact__2Hr29\",\"itemsContact\":\"ContactList_itemsContact__ktPfN\",\"itemName\":\"ContactList_itemName__6OYsD\",\"containerBtnDel\":\"ContactList_containerBtnDel__VyK1O\",\"btnDelete\":\"ContactList_btnDelete__Eeo9v\"};","import styles from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, getFilteredContacts } from '../../redux/contacts/selectors';\nimport { deleteContact} from '../../redux/contacts/operations';\n\nfunction ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filtredContacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  const filtered = Array.isArray(contacts) ? filtredContacts : [];\n\n  if (!Array.isArray(contacts)) {\n    console.error('Contacts is not an array:', contacts);\n    return null;\n  }\n\n  return (\n    <div className={styles.containerContacts}>\n      <h3 className={styles.titleContact}>Contact List:</h3>\n      <ul className={styles.itemsContact}>\n        {filtered.map(contact => (\n          <li key={contact.id} className={styles.itemContact}>\n            {`${contact.name}: ${contact.number}`}\n            <div className={styles.containerBtnDel}>\n              <button className={styles.btnDelete} onClick={() => dispatch(deleteContact(contact.id))}>Delete</button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"titleFilter\":\"FilterContacts_titleFilter__zFYP5\"};","import React from 'react';\nimport styles from './FilterContacts.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectStatusFilter } from '../../redux/contacts/selectors';\nimport { setStatusFilter } from '../../redux/contacts/filterSlice';\n\n\nfunction FilterContacts() {\n\n  const filter = useSelector(selectStatusFilter);\n  const dispatch = useDispatch();\n  const handleAddFilter = (ev) => {\n      dispatch(setStatusFilter(ev.target.value))\n      };\n\n      return(\n        <div className={styles.containerFilter}>\n          <h3 className={styles.titleFilter}>Contacts</h3>\n          <h3 className={styles.titleContact}>Find contacts by name</h3>\n          <input\n            className={styles.filterInput}\n            type = \"text\"\n            name = \"filter\"\n            value={filter}\n            placeholder=\"Contacts\"\n            onChange={handleAddFilter}\n            required\n          />\n        </div>\n      )\n}\n\nexport default FilterContacts;","import Section from \"../../components/Section/Section\";\nimport ContactForm from \"../../components/ContactForm/ContactForm\";\nimport ContactList from \"../../components/ContactList/ContactList\";\nimport FilterContacts from \"../../components/FilterContacts/FilterContacts\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"../../redux/contacts/operations\";\n\nexport default function Contacts () {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts()).then(response => console.log('Fetched contacts:', response));\n\n  }, [dispatch])\n\n  return (\n    <>\n      <Section title=\"PhoneBook\">\n        <ContactForm />\n        <FilterContacts />\n        <ContactList />\n      </Section>\n    </>\n  );\n}"],"names":["_ref","title","children","_jsxs","className","styles","_jsx","selectContacts","state","contacts","selectStatusFilter","filters","status","getFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","Notiflix","width","position","distance","opacity","useSelector","dispatch","useDispatch","_useState","useState","number","_useState2","_slicedToArray","formData","setFormData","handleInputChange","e","_e$target","target","value","prevState","_objectSpread","_defineProperty","handleAddContacts","newContact","existingContactByName","find","existingContactByNumber","concat","addContact","isFormValid","trim","onSubmit","preventDefault","id","nanoid","type","onChange","placeholder","pattern","required","disabled","filtredContacts","filtered","Array","isArray","map","onClick","deleteContact","console","error","ev","setStatusFilter","Contacts","useEffect","fetchContacts","then","response","log","_Fragment","Section","ContactForm","FilterContacts","ContactList"],"sourceRoot":""}